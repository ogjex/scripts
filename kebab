#!/usr/bin/env bash

# first let us outline all of the different functions necessary for the program to run
usage() {
	echo -e 'Usage: kebab [OPTIONS] [FILES or DIRECTORY]...\n\n'
        echo -e 'Arguments:\n   [FILES or DIRECTORY]... The files to rename or the directory to search through (eg. '*.filetype', '*', or '~/some-directory')\n'
        echo -e 'Options:'
        echo -e '   -h\n      Get this help output'
        echo -e '   -r\n      Recursively search through current directory depth first'
        
}

set_rename_pattern(){
    # Still an issue with unable to find and substitute first character of the string (in this case either - or _) in recursive FIND mode ONLY. In targeted mode this works fine.
    # Still needs a way to rename dots (.) in the filename without removing the file extension: idea:
    # s/\.(?![^.]+$)/_/g;
    recursive_pattern=$'s/_+|\s+/-/g; s/--+/-/g; s/^-//g; s/-\.$/\./g; y/A-Z/a-z/; y/ÆØÅ/æøå/'
    selective_pattern=$'s/\.(?![^.]+$)/_/g; s/_+|\s+/-/g; s/--+/-/g; s/^-|-$//g; s/-\.$/\./g; y/A-Z/a-z/; y/ÆØÅ/æøå/'
    # reg ex pattern explained:
    # s/_+|\s+/-/g = find one or more underscores _ OR (|) one or more whitespace (\s) and replace with a dash -
    # s/--+/-/g = replace any dash trailed by one or more dashes (-+) with a single dash
    # s/-\./\./ = find the first encounter of -. and replace with a single dot (\.) to ensure that the file suffix is not overwritten.
    # y/A-Z/a-z/ = replace all lower case to upper case
    # y/ÆØÅ/æøå/ = replace all lower case DK chars to upper case (needs to be part of separate pattern for some reason.
}

rename_selected_files(){
    # we first need to check all arguments to make sure that the selected files are valid
    # sending the argument array $@ to the checker
    check_selected_files "$@"

    # perform the rename on all elements in arg_arr
    set_rename_pattern
    
    count_var=$(perl-rename -fnv -- "$selective_pattern" "${arg_arr[@]}" | wc -l)
    msg_show_renamed
    # run a dry run
    perl-rename -fnv -- "$selective_pattern" "${arg_arr[@]}"
    prompt_proceed    

    if [[ "$response" =~ ^(yes|y)$ ]]
        then
           perl-rename -fv -- "$selective_pattern" "${arg_arr[@]}"
           msg_rename_complete
        else
            msg_aborting
    fi
    }

check_selected_files(){
    # function that checks the selected files
    # we first need to check all arguments to make sure that the selected files are valid
    if [[ $# -eq 0 ]]; then
        msg_illegal_parameters "$@"
    else 
        arg_arr=("$@")

        ## now loop through the above array
        for i in "${arg_arr[@]}"
            do
                if [[ ! -e $i ]]; then
                   msg_invalid_path "$i"
                fi
            done
    fi
}

check_parameters(){
    if [[ $# -ne 1 ]]; then
        msg_illegal_parameters "$@"
    fi
}

check_recursive_path(){
    if [[ ! -d $1 ]]; then
        msg_invalid_path "$1"
        msg_exit_fail
    fi 
}

rename_recursively(){
    # check that only one argument is provided
    check_parameters "$@"
    # check that the path is a valid directory
    check_recursive_path "$1"
    # set argument to absolute path to avoid dot replacement issues
    path="$(realpath $1)"
    set_rename_pattern
    # The following command is an alternative to find -execdir using xargs which also works
    #find $path -depth -print0 | xargs -0 perl-rename -fnv -- "$recursive_pattern"
    # dry run to check that all elements will be renamed correctly
    count_var=$(find $path -depth -execdir perl-rename -fnv -- "$recursive_pattern" {} + | wc -l) 
    msg_show_renamed
    find $path -depth -execdir perl-rename -fnv -- "$recursive_pattern" {} +
    prompt_proceed
    if [[ "$response" =~ ^(yes|y)$ ]]
        then
           find $path -depth -execdir perl-rename -fv -- "$recursive_pattern" {} +
           msg_rename_complete
        else
            msg_aborting
    fi
}

prompt_proceed(){
    #read -p "Do you want to proceed with the rename? (y/n) " -n 1 -r
    read -r -p "Do you want to proceed with the rename? (y/n) " response
    response=${response,,}    # tolower
    echo    # (optional) move to a new line
}
msg_show_renamed(){
    echo "The following $count_var elements will be renamed: "
}

msg_rename_complete(){
   echo
   echo "Files renamed to kebab-case."
}

msg_invalid_path(){
    echo "$1 is not a valid path."
    echo "Exiting..." >&2
    echo
    msg_exit_fail
}

msg_illegal_parameters(){
    echo "Illegal number of parameters: $#" >&2
    msg_exit_fail
}

msg_aborting(){
    echo "Aborting."
    exit 2
}
msg_exit_fail() {
    usage
    echo
    exit 2
}

while getopts 'hr' opt; do
    # we need to remove the first argument in the args array (the option) to send the remaining array to the next functions
    shift $((OPTIND - 1))
	case "$opt" in
		h) usage; exit 0;;
		r) rename_recursively "$@"; exit 0;;
	 	*) usage >&2; exit 1;;
	esac
done

# with no options we can call the normal rename function taking the args array as arguments
rename_selected_files "$@"
