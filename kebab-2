#!/usr/bin/env bash

# first let us outline all of the different functions necessary for the program to run
usage() {
	echo -e 'Usage: kebab [OPTIONS] [FILES or DIRECTORY]...\n\n'
        echo -e 'Arguments:\n   [FILES or DIRECTORY]... The files to rename or the directory to search through (eg. '*.filetype', '*', or '~/some-directory')\n'
        echo -e 'Options:'
        echo -e '   -h\n      Get this help output'
        echo -e '   -r\n      Recursively search through selected directory depth first'
        
}
# check_files()
set_rename_pattern(){
    PATTERN=$'s/[- ]+/-/g; s/ +-/-/; s/ +_/-/; s/[_-]+/-/g; y/A-Z/a-z/; y/ÆØÅ/æøå/'
}
# dry_run()
# rename_file()
rename_file(){
    # we first need to check all arguments to make sure that the selected files are valid
    ARG_ARR=("$@")
    ## declare empty array list with filepaths to rename
    declare -a RENAME_ARR=()
    ## now loop through the above array
    for i in "${ARG_ARR[@]}"
        do
            if [[ -e $i ]]; then
               echo "Added to rename array: $i"
               RENAME_ARR+=("$i")
            else 
               echo -e "$i is not a valid path.\nExiting." >&2
               exit 2
            fi
        done
    # echo all the elements that will be renamed
    for i in "${RENAME_ARR[@]}"
        do 
            echo -e "$i"
        done
}

rename_recursively(){
    # check that only one argument is provided
    if [[ $# -ne 1 ]]; then
        echo "Illegal number of parameters: $#" >&2
        usage
        exit 2
    fi
    ARG=$1
    if [[ -d $ARG ]]; then
        echo "$ARG is a directory"
        echo "renamed directory recursively: $ARG"
    elif [[ -f $ARG ]]; then
        echo "$ARG is a file and can not be renamed recursively."
        echo "Exiting..." >&2
        exit_fail
    else
        echo "$ARG is not a valid path" >&2
        exit_fail
    fi
    set_rename_pattern
    echo $PATTERN
}

# function to call so save 
exit_fail() {
    usage
    exit 2
}

while getopts 'hr' opt; do
    # we need to remove the first argument in the args array (the option) to send the remaining array to the next functions
    shift $((OPTIND - 1))
	case "$opt" in
		h) usage; exit 0;;
		r) rename_recursively "$@"; exit 0;;
	 	*) usage >&2; exit 1;;
	esac
done

# with no options we can call the normal rename function taking the args array as arguments
rename_file "$@"
