#!/usr/bin/env bash

# first let us outline all of the different functions necessary for the program to run
usage() {
	echo -e 'Usage: kebab [OPTIONS] [FILES or DIRECTORY]...\n\n'
        echo -e 'Arguments:\n   [FILES or DIRECTORY]... The files to rename or the directory to search through (eg. '*.filetype', '*', or '~/some-directory')\n'
        echo -e 'Options:'
        echo -e '   -h\n      Get this help output'
        echo -e '   -r\n      Recursively search through current directory depth first'
        
}
# check_files()
set_rename_pattern(){
    PATTERN=$'s/[- ]+/-/g; s/ +-/-/; s/ +_/-/; s/[_-]+/-/g; y/A-Z/a-z/; y/ÆØÅ/æøå/'
}
# dry_run()
# rename_file()
rename_file(){
    # we first need to check all arguments to make sure that the selected files are valid
    if [[ $# -eq 0 ]]; then
        echo "Illegal number of parameters: $#" >&2
        usage
        exit 2
    else 
        ARG_ARR=("$@")

        ## now loop through the above array
        for i in "${ARG_ARR[@]}"
            do
                if [[ ! -e $i ]]; then
                   echo -e "$i is not a valid path.\nExiting." >&2
                   exit 2
                fi
            done
    fi
    # perform the rename on all elements in ARG_ARRAY
    set_rename_pattern
    
    count_var=$(perl-rename -fnv "$PATTERN" "${ARG_ARR[@]}" | wc -l)
#    num_lines=$(cat $rename_var | wc -l)
#    echo $num_lines
    echo "The following $count_var elements will be renamed: "
    # the following needs to also be added 
    perl-rename -fnv "$PATTERN" "${ARG_ARR[@]}"

    read -p "Do you want to proceed with the rename? (y/n) " -n 1 -r
    echo -e "\n"

    if [[ $REPLY =~ ^[Yy]$ ]]
        then
            perl-rename -i "$PATTERN" "${ARG_ARR[@]}"
            # we need to find a way to count the number of times that the user has answered yes and use this as a variable

        else
            echo "Aborting."
    fi
    }

rename_recursively(){
    # check that only one argument is provided
    if [[ $# -ne 1 ]]; then
        echo "Illegal number of parameters: $#" >&2
        usage
        exit 2
    fi
    ARG=$1
    if [[ ! -d $ARG ]]; then
        echo "$ARG is not a valid path."
        echo "Exiting..." >&2
        exit_fail
    else
       set_rename_pattern
       # first set a new line for each array object
       IFS=$'\n'
       rename_arr=($(find "$(realpath $ARG)"))
       unset IFS

       perl-rename -fniv "$rename_pattern" "${rename_arr[@]}"
       echo "${rename_arr[@]}" 

       printf "%s\n" "${rename_arr[@]}"

       # echo all the elements that will be renamed
       #for i in "${rename_arr[@]}"
       #    do 
       #        echo -e "$i"
       #    done

    fi
    #    the following is code for the recursive depth-first search. 
    #    It needs to first find all files and folders and the paths to a rename array, so this array can be echoed and confirmed. Then perl-rename can be called on each path element in the array.
#    ## now loop through the above array
#    for i in "${ARG_ARR[@]}"
#        do
#            if [[ -e $i ]]; then
#               echo "Added to rename array: $i"
#               RENAME_ARR+=("$i")
#            else 
#               echo -e "$i is not a valid path.\nExiting." >&2
#               exit 2
#            fi
#        done
#    # echo all the elements that will be renamed
#    for i in "${RENAME_ARR[@]}"
#        do 
#            echo -e "$i"
#        done

}

# function to call so save 
exit_fail() {
    usage
    exit 2
}

while getopts 'hr' opt; do
    # we need to remove the first argument in the args array (the option) to send the remaining array to the next functions
    shift $((OPTIND - 1))
	case "$opt" in
		h) usage; exit 0;;
		r) rename_recursively "$@"; exit 0;;
	 	*) usage >&2; exit 1;;
	esac
done

# with no options we can call the normal rename function taking the args array as arguments
rename_file "$@"
